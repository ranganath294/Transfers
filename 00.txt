# views.py
from django.shortcuts import render
import pandas as pd
from datetime import datetime

def prepare_table_data(all_tc_df, phases, phase_dates_df):
    table_data = []
    
    def calculate_phase_metrics(df, phase):
        metrics = df[df['Test Phase'] == phase].groupby(['SP Name', 'Test Team'])['Result'].agg({
            'coverage': lambda x: ((x == 'Passed').sum() + (x == 'Failed').sum()) / len(x) * 100 if len(x) > 0 else 0,
            'passed': lambda x: (x == 'Passed').sum() / len(x) * 100 if len(x) > 0 else 0,
            'failed': lambda x: (x == 'Failed').sum() / len(x) * 100 if len(x) > 0 else 0,
            'blocked': lambda x: (x == 'Blocked').sum() / len(x) * 100 if len(x) > 0 else 0
        }).reset_index()
        return metrics

    # Calculate metrics for each phase
    phase_data = {phase: calculate_phase_metrics(all_tc_df, phase) for phase in phases}
    
    # Group by SP Name first
    sp_groups = all_tc_df.groupby('SP Name')
    
    for sp_name, sp_group in sp_groups:
        sp_teams = []
        # Then group by Test Team within each SP
        team_groups = sp_group.groupby('Test Team')
        
        for team_name, team_group in team_groups:
            team_phase_data = []
            
            for phase in phases:
                phase_metrics = phase_data[phase]
                metrics = phase_metrics[
                    (phase_metrics['SP Name'] == sp_name) & 
                    (phase_metrics['Test Team'] == team_name)
                ].to_dict('records')
                
                phase_date = "NA"
                if phase in ["ES", "FC", "CS"]:
                    date_value = phase_dates_df.loc[
                        phase_dates_df['FirstCustomerSP'] == sp_name, 
                        phase
                    ].iloc[0] if not phase_dates_df[
                        phase_dates_df['FirstCustomerSP'] == sp_name
                    ].empty else None
                    
                    if pd.notna(date_value):
                        phase_date = date_value.strftime('%m-%d-%Y')
                
                phase_info = {
                    'phase': phase,
                    'date': phase_date,
                    'metrics': metrics[0] if metrics else {
                        'coverage': 0,
                        'passed': 0,
                        'failed': 0,
                        'blocked': 0
                    }
                }
                team_phase_data.append(phase_info)
            
            sp_teams.append({
                'team_name': team_name,
                'phases': team_phase_data
            })
        
        table_data.append({
            'sp_name': sp_name,
            'teams': sp_teams
        })
    
    return table_data

def active_sps_view(request):
    # Your existing data loading code here
    phases = ["ES", "FC", "CS", "PI", "SIT"]  # Fixed phases
    
    table_data = prepare_table_data(all_tc_df, phases, phase_dates_df)
    context = {
        'table_data': table_data,
        'phases': phases
    }
    return render(request, 'active_sps.html', context)

# Template: active_sps.html
{% extends 'base.html' %}
{% block content %}
<div class="container-fluid">
    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table id="activeSpsTable" class="table table-bordered table-hover">
                    <thead class="thead-light">
                        <tr>
                            <th>SP Name</th>
                            <th>Test Team</th>
                            <th>Phase</th>
                            <th>Date</th>
                            <th>Coverage %</th>
                            <th>Pass %</th>
                            <th>Fail %</th>
                            <th>Block %</th>
                        </tr>
                    </thead>
                    <tbody id="tableBody">
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<style>
.table th {
    background-color: #f8f9fa;
    position: sticky;
    top: 0;
    z-index: 1;
}

.tooltip-cell {
    position: relative;
}

.custom-tooltip {
    visibility: hidden;
    position: absolute;
    z-index: 1000;
    background-color: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 5px 10px;
    border-radius: 4px;
    font-size: 12px;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    white-space: nowrap;
}

.tooltip-cell:hover .custom-tooltip {
    visibility: visible;
}

.metric-cell {
    cursor: default;
}

.phase-row:nth-child(odd) {
    background-color: rgba(0, 0, 0, 0.02);
}

.sp-group {
    background-color: #f8f9fa;
}

.team-group {
    background-color: #ffffff;
}

.highlighted-team {
    background-color: rgba(0, 123, 255, 0.1);
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const tableData = {{ table_data|safe }};
    const tableBody = document.getElementById('tableBody');
    
    function formatPercent(value) {
        return typeof value === 'number' ? value.toFixed(1) : 'NA';
    }
    
    function createTooltipCell(content, tooltipText) {
        return `
            <td class="tooltip-cell metric-cell">
                ${content}
                <span class="custom-tooltip">${tooltipText}</span>
            </td>
        `;
    }
    
    tableData.forEach(spData => {
        let firstSpRow = true;
        let totalSpRows = spData.teams.length * 5;  // 5 fixed phases
        
        spData.teams.forEach(team => {
            let firstTeamRow = true;
            
            team.phases.forEach((phase, phaseIndex) => {
                let row = document.createElement('tr');
                row.className = 'phase-row';
                row.setAttribute('data-team', team.team_name);
                
                if (firstSpRow) {
                    let spCell = document.createElement('td');
                    spCell.rowSpan = totalSpRows;
                    spCell.innerHTML = `
                        <a href="/sp-execution-data?sp=${spData.sp_name}" target="_blank">
                            ${spData.sp_name}
                        </a>
                    `;
                    row.appendChild(spCell);
                    firstSpRow = false;
                }
                
                if (firstTeamRow) {
                    let teamCell = document.createElement('td');
                    teamCell.rowSpan = 5;  // 5 fixed phases
                    teamCell.textContent = team.team_name;
                    row.appendChild(teamCell);
                    firstTeamRow = false;
                }
                
                row.insertAdjacentHTML('beforeend', `
                    <td>${phase.phase}</td>
                    <td>${phase.date}</td>
                    ${createTooltipCell(
                        formatPercent(phase.metrics.coverage),
                        `${spData.sp_name} ${team.team_name} ${phase.phase} Coverage ${formatPercent(phase.metrics.coverage)}%`
                    )}
                    ${createTooltipCell(
                        formatPercent(phase.metrics.passed),
                        `${spData.sp_name} ${team.team_name} ${phase.phase} Pass ${formatPercent(phase.metrics.passed)}%`
                    )}
                    ${createTooltipCell(
                        formatPercent(phase.metrics.failed),
                        `${spData.sp_name} ${team.team_name} ${phase.phase} Fail ${formatPercent(phase.metrics.failed)}%`
                    )}
                    ${createTooltipCell(
                        formatPercent(phase.metrics.blocked),
                        `${spData.sp_name} ${team.team_name} ${phase.phase} Block ${formatPercent(phase.metrics.blocked)}%`
                    )}
                `);
                
                tableBody.appendChild(row);
            });
        });
    });
    
    // Add event listeners for team highlighting
    const rows = document.querySelectorAll('.phase-row');
    rows.forEach(row => {
        row.addEventListener('mouseenter', () => {
            const team = row.getAttribute('data-team');
            document.querySelectorAll(`[data-team="${team}"]`).forEach(r => {
                r.classList.add('highlighted-team');
            });
        });
        
        row.addEventListener('mouseleave', () => {
            const team = row.getAttribute('data-team');
            document.querySelectorAll(`[data-team="${team}"]`).forEach(r => {
                r.classList.remove('highlighted-team');
            });
        });
    });
});
</script>
{% endblock %}