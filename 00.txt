# views.py
from django.shortcuts import render
import pandas as pd
from datetime import datetime

def prepare_table_data(all_tc_df, phases, phase_dates_df):
    table_data = []
    
    def calculate_phase_metrics(df, phase):
        metrics = df[df['Test Phase'] == phase].groupby(['SP Name', 'Test Team'])['Result'].agg({
            'coverage': lambda x: ((x == 'Passed').sum() + (x == 'Failed').sum()) / len(x) * 100 if len(x) > 0 else 0,
            'passed': lambda x: (x == 'Passed').sum() / len(x) * 100 if len(x) > 0 else 0,
            'failed': lambda x: (x == 'Failed').sum() / len(x) * 100 if len(x) > 0 else 0,
            'blocked': lambda x: (x == 'Blocked').sum() / len(x) * 100 if len(x) > 0 else 0
        }).reset_index()
        return metrics

    # Calculate metrics for each phase
    phase_data = {phase: calculate_phase_metrics(all_tc_df, phase) for phase in phases}
    
    # Get unique SP and Test Team combinations
    sp_teams = all_tc_df[['SP Name', 'Test Team']].drop_duplicates()
    
    for _, row in sp_teams.iterrows():
        sp_name = row['SP Name']
        test_team = row['Test Team']
        
        sp_phases = []
        for phase in phases:
            phase_metrics = phase_data[phase]
            metrics = phase_metrics[
                (phase_metrics['SP Name'] == sp_name) & 
                (phase_metrics['Test Team'] == test_team)
            ].to_dict('records')
            
            phase_date = "NA"
            if phase in ["ES", "FC", "CS"]:
                date_value = phase_dates_df.loc[
                    phase_dates_df['FirstCustomerSP'] == sp_name, 
                    phase
                ].iloc[0] if not phase_dates_df[
                    phase_dates_df['FirstCustomerSP'] == sp_name
                ].empty else None
                
                if pd.notna(date_value):
                    phase_date = date_value.strftime('%m-%d-%Y')
            
            phase_info = {
                'phase': phase,
                'date': phase_date,
                'metrics': metrics[0] if metrics else {
                    'coverage': 0,
                    'passed': 0,
                    'failed': 0,
                    'blocked': 0
                }
            }
            sp_phases.append(phase_info)
        
        table_data.append({
            'sp_name': sp_name,
            'test_team': test_team,
            'phases': sp_phases
        })
    
    return table_data

def active_sps_view(request):
    # Your existing data loading code here
    # ...
    
    context = {
        'table_data': prepare_table_data(all_tc_df, phases, phase_dates_df),
        'phases': phases
    }
    return render(request, 'active_sps.html', context)