class OptimizedSelect {
  constructor(originalSelect, options = {}) {
    this.originalSelect = originalSelect;
    this.options = options;
    this.itemHeight = 35;
    this.visibleItems = 8;
    this.allOptions = Array.from(originalSelect.options).map(opt => ({
      value: opt.value,
      label: opt.text
    }));
    this.isOpen = false;

    this.init();
  }

  init() {
    // Create wrapper
    this.wrapper = document.createElement('div');
    this.wrapper.className = 'optimized-select-wrapper';

    // Create custom select button
    this.button = document.createElement('button');
    this.button.className = 'optimized-select-button form-select';
    this.button.type = 'button'; // Prevent form submission
    this.button.textContent = this.originalSelect.selectedOptions[0]?.text || 'Choose...';

    // Create dropdown container
    this.dropdown = document.createElement('div');
    this.dropdown.className = 'optimized-select-dropdown';

    // Create search input
    this.searchInput = document.createElement('input');
    this.searchInput.className = 'optimized-select-search form-control';
    this.searchInput.placeholder = 'Search users...';

    // Create options container
    this.optionsContainer = document.createElement('div');
    this.optionsContainer.className = 'optimized-select-options';
    this.optionsContainer.style.height = `${this.itemHeight * this.visibleItems}px`;

    // Create virtual scroll container
    this.virtualScroll = document.createElement('div');
    this.virtualScroll.className = 'virtual-scroll-container';

    // Assemble the components
    this.dropdown.appendChild(this.searchInput);
    this.dropdown.appendChild(this.optionsContainer);
    this.optionsContainer.appendChild(this.virtualScroll);
    this.wrapper.appendChild(this.button);
    this.wrapper.appendChild(this.dropdown);

    // Insert custom select after original
    this.originalSelect.style.display = 'none';
    this.originalSelect.parentNode.insertBefore(this.wrapper, this.originalSelect.nextSibling);

    this.addEventListeners();
    this.filterAndRenderOptions();
  }

  addEventListeners() {
    // Toggle dropdown with improved handling
    this.button.addEventListener('mousedown', (e) => {
      e.preventDefault(); // Prevent focus issues
      this.toggleDropdown();
    });

    // Handle search
    this.searchInput.addEventListener('input', () => {
      this.filterAndRenderOptions();
    });

    // Prevent search input from closing dropdown
    this.searchInput.addEventListener('mousedown', (e) => {
      e.stopPropagation();
    });

    // Handle scroll
    this.optionsContainer.addEventListener('scroll', () => {
      this.renderVisibleOptions();
    });

    // Close dropdown when clicking outside
    document.addEventListener('mousedown', (e) => {
      if (!this.wrapper.contains(e.target)) {
        this.closeDropdown();
      }
    });

    // Prevent dropdown from closing when clicking inside
    this.dropdown.addEventListener('mousedown', (e) => {
      e.stopPropagation();
    });
  }

  toggleDropdown() {
    if (this.isOpen) {
      this.closeDropdown();
    } else {
      this.openDropdown();
    }
  }

  openDropdown() {
    this.isOpen = true;
    this.dropdown.style.display = 'block';
    this.searchInput.focus();
    this.filterAndRenderOptions();
  }

  closeDropdown() {
    this.isOpen = false;
    this.dropdown.style.display = 'none';
    this.searchInput.value = '';
    this.filterAndRenderOptions();
  }

  filterAndRenderOptions() {
    const searchTerm = this.searchInput.value.toLowerCase();
    this.filteredOptions = this.allOptions.filter(option => 
      option.label.toLowerCase().includes(searchTerm)
    );

    // Reset scroll position
    this.optionsContainer.scrollTop = 0;
    this.virtualScroll.style.height = `${this.filteredOptions.length * this.itemHeight}px`;
    this.renderVisibleOptions();
  }

  renderVisibleOptions() {
    const scrollTop = this.optionsContainer.scrollTop;
    const startIndex = Math.floor(scrollTop / this.itemHeight);
    const endIndex = startIndex + this.visibleItems + 2;

    this.virtualScroll.innerHTML = '';

    this.filteredOptions.slice(startIndex, endIndex).forEach((option, index) => {
      const optionEl = document.createElement('div');
      optionEl.className = 'optimized-select-option';
      optionEl.textContent = option.label;
      optionEl.style.position = 'absolute';
      optionEl.style.top = `${(startIndex + index) * this.itemHeight}px`;
      optionEl.style.height = `${this.itemHeight}px`;

      optionEl.addEventListener('mousedown', (e) => {
        e.preventDefault(); // Prevent focus issues
        this.selectOption(option);
      });

      this.virtualScroll.appendChild(optionEl);
    });
  }

  selectOption(option) {
    // Update original select
    this.originalSelect.value = option.value;
    this.originalSelect.dispatchEvent(new Event('change'));

    // Update custom select
    this.button.textContent = option.label;
    this.closeDropdown();
  }
}



Hey Ranganath

I hope you are doing well. My name is Nikil Saini and I have recently completed my summer internship at Amazon. I have a strong hold over Data Structures and Algorithms. I am interested in SWE Role @Qualcomm. Can you please refer me for the same. Provided below are necessary details:



