{% extends 'iot_catalogue/base.html' %}

{% block content_div %}
{% if is_admin %}

<div class="alert alert-info" role="alert">
  <i class="bi bi-info-circle"></i> * To create new entries, please select "Other" from the respective dropdown and enter the new name in the field that appears. Fields marked with * are mandatory.
</div>

<form method="post" action="{% url 'iot_catalogue:data_entry' %}" class="row g-3" id="iotForm">
{% csrf_token %}
<!-- ... (previous form fields up to model number remain same) ... -->

<div class="mb-3">
<label class="form-label" for="model_number-select">Model Number</label>
<select name="model_number" class="form-select optimized-select" id="model_number-select">
<option value="default" selected>-- All --</option>
<option value="other">Other</option>
{% for model_number in model_numbers %}
<option value="{{ model_number }}">{{ model_number }}</option>
{% endfor %}
</select>
<div class="input-group mt-2">
    <input type="text" name="new_model_number" class="form-control" placeholder="Enter new model number" disabled>
    <span class="input-group-text text-danger d-none">*</span>
</div>
</div>

<!-- ... (middle form fields remain same) ... -->

<div class="mb-3">
<label class="form-label" for="manufacturer-select">Manufacturer</label>
<select name="manufacturer" class="form-select optimized-select" id="manufacturer-select">
<option value="default" selected>-- All --</option>
<option value="other">Other</option>
{% for manufacturer in manufacturers %}
<option value="{{ manufacturer }}">{{ manufacturer }}</option>
{% endfor %}
</select>
<div class="input-group mt-2">
    <input type="text" name="new_manufacturer" class="form-control" placeholder="Enter new manufacturer" disabled>
    <span class="input-group-text text-danger d-none">*</span>
</div>
</div>

<div class="mb-3">
<label class="form-label" for="chipset_manufacturer-select">Chipset Manufacturer</label>
<select name="chipset_manufacturer" class="form-select optimized-select" id="chipset_manufacturer-select">
<option value="default" selected>-- All --</option>
<option value="other">Other</option>
{% for chipset_manufacturer in chipset_manufacturers %}
<option value="{{ chipset_manufacturer }}">{{ chipset_manufacturer }}</option>
{% endfor %}
</select>
<div class="input-group mt-2">
    <input type="text" name="new_chipset_manufacturer" class="form-control" placeholder="Enter new chipset manufacturer" disabled>
    <span class="input-group-text text-danger d-none">*</span>
</div>
</div>

<!-- ... (remaining form fields remain same) ... -->

<div class="col-12 text-end">
<button type="submit" class="btn btn-primary">Create</button>
</div>
</form>

<style>
/* ... (previous styles remain the same) ... */
</style>

<script>
// ... (OptimizedSelect class remains unchanged) ... 

// Initialize optimized selects and handle form validation
document.addEventListener('DOMContentLoaded', function() {
    // Initialize optimized selects
    document.querySelectorAll('.optimized-select').forEach(select => {
        new OptimizedSelect(select);
    });

    // Handle "Other" option and validation
    const handleOtherOption = (selectElement) => {
        const inputName = `new_${selectElement.name}`;
        const inputWrapper = document.querySelector(`input[name="${inputName}"]`).parentElement;
        const newEntryInput = inputWrapper.querySelector('input');
        const requiredMarker = inputWrapper.querySelector('.input-group-text');
        
        const updateInputState = (isOther) => {
            newEntryInput.disabled = !isOther;
            if (isOther) {
                newEntryInput.setAttribute('required', '');
                requiredMarker.classList.remove('d-none');
            } else {
                newEntryInput.removeAttribute('required');
                requiredMarker.classList.add('d-none');
                newEntryInput.value = ''; // Clear the input when disabled
            }
        };

        // Update on change event
        selectElement.addEventListener('change', function() {
            updateInputState(this.value === 'other');
        });

        // Also handle the OptimizedSelect's custom event
        selectElement.addEventListener('customSelect:change', function() {
            updateInputState(this.value === 'other');
        });
    };

    // Apply the handler to each select that needs it
    ['manufacturer', 'model_number', 'chipset_manufacturer'].forEach(selectName => {
        const select = document.querySelector(`select[name="${selectName}"]`);
        if (select) {
            handleOtherOption(select);
        }
    });

    // Form validation
    document.getElementById('iotForm').addEventListener('submit', function(e) {
        let isValid = true;
        
        ['manufacturer', 'model_number', 'chipset_manufacturer'].forEach(fieldName => {
            const select = document.querySelector(`select[name="${fieldName}"]`);
            const newInput = document.querySelector(`input[name="new_${fieldName}"]`);
            
            if (select.value === 'other' && (!newInput.value || newInput.value.trim() === '')) {
                isValid = false;
                newInput.classList.add('is-invalid');
            } else {
                newInput.classList.remove('is-invalid');
            }
        });

        if (!isValid) {
            e.preventDefault();
            alert('Please fill in all required fields marked with *');
        }
    });
});
</script>
{% endif %}
{% endblock %}