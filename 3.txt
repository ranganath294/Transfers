{% extends 'iot_catalogue/base.html' %}
{% load static %}

{% block content_div %}

<form id="iot-search-form" method="post" action="{% url 'iot_catalogue:search' %}" class="row g-3">
{% csrf_token %}
<div class="col-md-6">
<div class="mb-3">
<label class="form-label" for="device-type-select">Device Type</label>
<select name="device_type" class="form-select" id="device-type-select">
<option value="default" selected>-- All --</option>
<option value="Headset">Headset</option>
<option value="Speaker">Speaker</option>
<option value="Earbud">Earbud</option>
<option value="Earbud - LEA">Earbud - LEA</option>
<option value="HID Mouse">HID Mouse</option>
<option value="HID Keyboard">HID Keyboard</option>
<option value="HID Gamepad">HID Gamepad</option>
<option value="HOGP Mouse">HOGP Mouse</option>
<option value="HOGP Keyboard">HOGP Keyboard</option>
<option value="HOGP Gamepad">HOGP Gamepad</option>
<option value="Carkit">Carkit</option>
<option value="Smart Watch">Smart Watch</option>
<option value="Fitness band">Fitness band</option>
<option value="Heart rate monitor">Heart rate monitor</option>
<option value="LE tracker">LE tracker</option>
<option value="Phone">Phone</option>
<option value="Smart ring">Smart ring</option>
<option value="Health device">Health device</option>
<option value="Smart bulb">Smart bulb</option>
</select>
</div>

<div class="mb-3">
<label class="form-label">Model Number</label>
<div class="input-group">
<span class="input-group-text">LIKE</span>
<input type="text" name="model_number" class="form-control">
</div>
</div>

<div class="mb-3">
<label class="form-label">Chipset Manufacturer</label>
<div class="input-group">
<span class="input-group-text">LIKE</span>
<input type="text" name="chipset_manufacturer" class="form-control">
</div>
</div>

<div class="mb-3">
<label class="form-label">Procured Date</label>
<div class="input-group">
<span class="input-group-text">BETWEEN</span>
<input type="date" name="procured_date_between" class="form-control">
<span class="input-group-text">AND</span>
<input type="date" name="procured_date_and" class="form-control">
</div>
</div>

<div class="mb-3">
<label class="form-label">Availability</label>
<select name="availability" class="form-select">
<option value="default" selected>-- All --</option>
<option value="Available">Available</option>
<option value="In Use">In Use</option>
</select>
</div>

</div>

<div class="col-md-6">

<div class="mb-3">
<label class="form-label">Manufacturer</label>
<div class="input-group">
<span class="input-group-text">LIKE</span>
<input type="text" name="manufacturer" class="form-control">
</div>
</div>

<div class="mb-3">
<label class="form-label">Model Year</label>
<div class="input-group">
<span class="input-group-text">BETWEEN</span>
<input type="number" name="model_year_between" class="form-control">
<span class="input-group-text">AND</span>
<input type="number" name="model_year_and" class="form-control">
</div>
</div>

<div class="mb-3">
<label class="form-label">Device Status</label>
<select name="device_status" class="form-select">
<option value="default" selected>-- All --</option>
<option value="Active">Active</option>
<option value="Missing">Missing</option>
<option value="Retired">Retired</option>
<option value="Damaged">Damaged</option>
</select>
</div>

<div class="mb-3">
<label class="form-label">Geo Locations</label>
<select name="geo_location" class="form-select">
<option value="default" selected>-- All --</option>
<option value="SD">SD</option>
<option value="SDC">SDC</option>
<option value="QIPL">QIPL</option>
</select>
</div>

<!-- <div class="mb-3">
<label class="form-label">Supported Technologies</label>
<select name="supported_technologies" class="form-select">
<option value="default" selected>-- All --</option>
<option value="wlan">WLAN</option>
<option value="bluetooth">Bluetooth</option>
<option value="wlan_and_bluetooth">WLAN and Bluetooth</option>
</select>
</div>

<div class="mb-3">
<label class="form-label">Customer Names</label>
<div class="input-group">
<span class="input-group-text">LIKE</span>
<input type="text" name="customer_names" class="form-control">
</div>
</div>  -->
</div>

<div class="col-12 text-end">
<button type="submit" class="btn btn-primary">
<i class="fas fa-search me-2"></i>Search
</button>
<button type="reset" class="btn btn-secondary">
<i class="fas fa-undo me-2"></i>Reset
</button>
</div>
</form>
<div class="modal fade" id="userAssignmentModal" tabindex="-1" aria-labelledby="userAssignmentModalLabel" aria-hidden="true">
<div class="modal-dialog modal-dialog-centered">
<div class="modal-content">
<div class="modal-header">
<h5 class="modal-title" id="userAssignmentModalLabel">Assign User</h5>
<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
</div>
<div class="modal-body">
<div class="mb-3">
<label for="userSelect" class="form-label">Select User</label>
<select class="form-select" id="userSelect">
<option value="">Choose...</option>
{% for username in usernames %}
<option value="{{ username }}">{{ username }}</option>
{% endfor %}
</select>
</div>
</div>
<div class="modal-footer">
<button type="button" class="btn btn-primary" id="userAssignmentModalSaveBtn">Save changes</button>
</div>
</div>
</div>
</div>
{% endblock %}

{% block results_div %}
{% if devices %}

<style>
/* <link rel="stylesheet" href="{% static 'iot_catalogue/css/optimized-select.css' %}"> */
.table-container {
position: relative;
max-height: calc(100vh - 300px);
overflow: auto;
}

/* Make the header sticky */
.table-sticky thead {
position: sticky;
top: 0;
z-index: 1;
background-color: #f8f9fa;
}

/* Custom scrollbar styling */
.table-container::-webkit-scrollbar {
width: 8px;
height: 8px;
}

.table-container::-webkit-scrollbar-track {
background: #f1f1f1;
border-radius: 4px;
}

.table-container::-webkit-scrollbar-thumb {
background: #888;
border-radius: 4px;
}

.table-container::-webkit-scrollbar-thumb:hover {
background: #555;
}

/* Ensure table columns don't wrap */
.table-sticky th,
.table-sticky td {
white-space: nowrap;
padding: 0.75rem;
}

/* Add shadow when scrolling */
.table-shadow {
box-shadow: inset 0 0 5px rgba(0,0,0,0.15);
border-radius: 0.375rem;
}

.current-user-cell {
display: flex;
align-items: center;
gap: 1rem;
}

.current-user-text {
flex-grow: 1;
}

.current-user-edit-icon {
color: #6c757d;
cursor: pointer;
transition: color 0.2s ease;
}

.current-user-edit-icon:hover {
color: #0d6efd;
}

.optimized-select-wrapper {
position: relative;
width: 100%;
}

.optimized-select-button {
width: 100%;
text-align: left;
cursor: pointer;
}

.optimized-select-dropdown {
display: none;
position: absolute;
top: 100%;
left: 0;
right: 0;
background: white;
border: 1px solid #dee2e6;
border-radius: 0.375rem;
box-shadow: 0 2px 5px rgba(0,0,0,0.1);
z-index: 1000;
margin-top: 0.25rem;
}

.optimized-select-search {
width: 100%;
padding: 0.5rem;
border-bottom: 1px solid #dee2e6;
border-radius: 0.375rem 0.375rem 0 0;
}

.optimized-select-options {
overflow-y: auto;
position: relative;
border-radius: 0 0 0.375rem 0.375rem;
}

.virtual-scroll-container {
position: relative;
}

.optimized-select-option {
padding: 0.5rem 1rem;
cursor: pointer;
position: absolute;
width: 100%;
display: flex;
align-items: center;
}

.optimized-select-option:hover {
background-color: #f8f9fa;
}

.optimized-select-options::-webkit-scrollbar {
width: 6px;
}

.optimized-select-options::-webkit-scrollbar-track {
background: #f1f1f1;
border-radius: 3px;
}

.optimized-select-options::-webkit-scrollbar-thumb {
background: #888;
border-radius: 3px;
}

.optimized-select-options::-webkit-scrollbar-thumb:hover {
background: #555;
}
</style>

<div class="card-body">
<div class="table-shadow">
<div class="table-container">
<table class="table table-hover table-sticky mb-0">
<thead>
<tr class="bg-light">
{% for col_name in column_names %}
<th class="fw-semibold">{{ col_name }}</th>
{% endfor %}
</tr>
</thead>
<tbody id="results-table-body">
<!-- Rows will be inserted here by JavaScript -->
</tbody>
</table>
</div>
</div>
</div>

<script id="devices-data" type="application/json">
{{ devices|safe }}
</script>

<script>
// Custom select with virtual scrolling and search
class OptimizedSelect {
constructor(originalSelect, options = {}) {
this.originalSelect = originalSelect;
this.options = options;
this.itemHeight = 35;
this.visibleItems = 8;
this.allOptions = Array.from(originalSelect.options).map(opt => ({
value: opt.value,
label: opt.text
}));
this.isOpen = false;

this.init();
}

init() {
// Create wrapper
this.wrapper = document.createElement('div');
this.wrapper.className = 'optimized-select-wrapper';

// Create custom select button
this.button = document.createElement('button');
this.button.className = 'optimized-select-button form-select';
this.button.type = 'button'; // Prevent form submission
this.button.textContent = this.originalSelect.selectedOptions[0]?.text || 'Choose...';

// Create dropdown container
this.dropdown = document.createElement('div');
this.dropdown.className = 'optimized-select-dropdown';

// Create search input
this.searchInput = document.createElement('input');
this.searchInput.className = 'optimized-select-search form-control';
this.searchInput.placeholder = 'Search users...';

// Create options container
this.optionsContainer = document.createElement('div');
this.optionsContainer.className = 'optimized-select-options';
this.optionsContainer.style.height = `${this.itemHeight * this.visibleItems}px`;

// Create virtual scroll container
this.virtualScroll = document.createElement('div');
this.virtualScroll.className = 'virtual-scroll-container';

// Assemble the components
this.dropdown.appendChild(this.searchInput);
this.dropdown.appendChild(this.optionsContainer);
this.optionsContainer.appendChild(this.virtualScroll);
this.wrapper.appendChild(this.button);
this.wrapper.appendChild(this.dropdown);

// Insert custom select after original
this.originalSelect.style.display = 'none';
this.originalSelect.parentNode.insertBefore(this.wrapper, this.originalSelect.nextSibling);

this.addEventListeners();
this.filterAndRenderOptions();
}

addEventListeners() {
// Toggle dropdown with improved handling
this.button.addEventListener('mousedown', (e) => {
e.preventDefault(); // Prevent focus issues
this.toggleDropdown();
});

// Handle search
this.searchInput.addEventListener('input', () => {
this.filterAndRenderOptions();
});

// Prevent search input from closing dropdown
this.searchInput.addEventListener('mousedown', (e) => {
e.stopPropagation();
});

// Handle scroll
this.optionsContainer.addEventListener('scroll', () => {
this.renderVisibleOptions();
});

// Close dropdown when clicking outside
document.addEventListener('mousedown', (e) => {
if (!this.wrapper.contains(e.target)) {
this.closeDropdown();
}
});

// Prevent dropdown from closing when clicking inside
this.dropdown.addEventListener('mousedown', (e) => {
e.stopPropagation();
});
}

toggleDropdown() {
if (this.isOpen) {
this.closeDropdown();
} else {
this.openDropdown();
}
}

openDropdown() {
this.isOpen = true;
this.dropdown.style.display = 'block';
this.searchInput.focus();
this.filterAndRenderOptions();
}

closeDropdown() {
this.isOpen = false;
this.dropdown.style.display = 'none';
this.searchInput.value = '';
this.filterAndRenderOptions();
}

filterAndRenderOptions() {
const searchTerm = this.searchInput.value.toLowerCase();
this.filteredOptions = this.allOptions.filter(option => 
option.label.toLowerCase().includes(searchTerm)
);

// Reset scroll position
this.optionsContainer.scrollTop = 0;
this.virtualScroll.style.height = `${this.filteredOptions.length * this.itemHeight}px`;
this.renderVisibleOptions();
}

renderVisibleOptions() {
const scrollTop = this.optionsContainer.scrollTop;
const startIndex = Math.floor(scrollTop / this.itemHeight);
const endIndex = startIndex + this.visibleItems + 2;

this.virtualScroll.innerHTML = '';

this.filteredOptions.slice(startIndex, endIndex).forEach((option, index) => {
const optionEl = document.createElement('div');
optionEl.className = 'optimized-select-option';
optionEl.textContent = option.label;
optionEl.style.position = 'absolute';
optionEl.style.top = `${(startIndex + index) * this.itemHeight}px`;
optionEl.style.height = `${this.itemHeight}px`;

optionEl.addEventListener('mousedown', (e) => {
e.preventDefault(); // Prevent focus issues
this.selectOption(option);
});

this.virtualScroll.appendChild(optionEl);
});
}

selectOption(option) {
// Update original select
this.originalSelect.value = option.value;
this.originalSelect.dispatchEvent(new Event('change'));

// Update custom select
this.button.textContent = option.label;
this.closeDropdown();
}
}
</script>

<script>
document.addEventListener('DOMContentLoaded', function() {
const devicesData = JSON.parse(document.getElementById('devices-data').textContent);
const tableBody = document.getElementById('results-table-body');
let currentRow = null; // Variable to keep track of the current row being edited

devicesData.forEach(device => {
const row = document.createElement('tr');
row.setAttribute('data-id', device.id);
for (const key in device) {
const cell = document.createElement('td');

if (key === "current_user__username") {
const container = document.createElement('div');
container.className = 'current-user-cell';

const userText = document.createElement('span');
userText.className = 'current-user-text';
userText.textContent = device[key] || '';
container.appendChild(userText);

const editIcon = document.createElement('i');
editIcon.className = 'fas fa-edit current-user-edit-icon';
editIcon.setAttribute('title', 'Edit User Assignment');

editIcon.addEventListener('click', function(e) {
e.stopPropagation();

// Pre-select current user if exists
const userSelect = document.getElementById('userSelect');
if (device[key]) {
userSelect.value = device[key];
} else {
userSelect.selectedIndex = 0;
}

// Set the current row being edited
currentRow = row;

// Show modal
const modal = new bootstrap.Modal(document.getElementById('userAssignmentModal'));
modal.show();
});

container.appendChild(editIcon);
cell.appendChild(container);
} else if (key === "availability") {
cell.className = 'availability-cell';
cell.textContent = device[key];
} else if (key === "assigned_date") {
cell.className = 'assigned-date-cell';
cell.textContent = device[key];
} else {
cell.textContent = device[key];
}

row.appendChild(cell);
}
tableBody.appendChild(row);
});

// Initialize the optimized select when the modal is shown
const userAssignmentModal = document.getElementById('userAssignmentModal');
userAssignmentModal.addEventListener('show.bs.modal', function() {
const userSelect = document.getElementById('userSelect');
if (!userSelect.optimizedSelect) {
userSelect.optimizedSelect = new OptimizedSelect(userSelect);
}
});

// Add the event listener for the save button only once
const saveUserBtn = document.getElementById('userAssignmentModalSaveBtn');
saveUserBtn.addEventListener('click', function() {
// Hide the modal
const modal = bootstrap.Modal.getInstance(document.getElementById('userAssignmentModal'));
modal.hide();

// Get the selected user and rowId
const selectedUser = document.getElementById('userSelect').value;
const rowId = currentRow.getAttribute('data-id');

const csrftoken = getCookie('csrftoken');

// Send a PUT request
fetch("{% url 'iot_catalogue:assign_user' %}", {
method: 'PATCH',
headers: {
'Content-Type': 'application/json',
'X-CSRFToken': csrftoken
},
body: JSON.stringify({ user: selectedUser, id: rowId })
})
.then(response => response.json())
.then(data => {
// console.log('Success:', data);
const currentUserCell = currentRow.querySelector('.current-user-text');
currentUserCell.textContent = selectedUser;

const availabilityCell = currentRow.querySelector('.availability-cell');
const assignedDateCell = currentRow.querySelector('.assigned-date-cell');
const currentDate = new Date().toISOString().split('T')[0]; // Format: YYYY-MM-DD

if (selectedUser) {
availabilityCell.textContent = "In Use";
assignedDateCell.textContent = currentDate;
} else {
availabilityCell.textContent = "Available";
assignedDateCell.textContent = "";
}
})
.catch((error) => {
console.error('Error:', error);
});
});
});

function getCookie(name) {
let cookieValue = null;
if (document.cookie && document.cookie !== '') {
const cookies = document.cookie.split(';');
for (let i = 0; i < cookies.length; i++) {
const cookie = cookies[i].trim();
if (cookie.substring(0, name.length + 1) === (name + '=')) {
cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
break;
}
}
}
return cookieValue;
}    
</script>

{% endif %}
{% endblock %}
