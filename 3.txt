{% extends 'iot_catalogue/base.html' %}

{% block content_div %}
{% if is_admin %}

<form method="post" action="{% url 'iot_catalogue:data_entry' %}" class="row g-3">
{% csrf_token %}
<div class="col-md-6">
<div class="mb-3">
<label class="form-label">Device Type</label>
<select name="device_type" class="form-select optimized-select">
<option value="default" selected>-- All --</option>
<option value="Headset">Headset</option>
<option value="Speaker">Speaker</option>
<option value="Earbud">Earbud</option>
<option value="Earbud - LEA">Earbud - LEA</option>
<option value="HID Mouse">HID Mouse</option>
<option value="HID Keyboard">HID Keyboard</option>
<option value="HID Gamepad">HID Gamepad</option>
<option value="HOGP Mouse">HOGP Mouse</option>
<option value="HOGP Keyboard">HOGP Keyboard</option>
<option value="HOGP Gamepad">HOGP Gamepad</option>
<option value="Carkit">Carkit</option>
<option value="Smart Watch">Smart Watch</option>
<option value="Fitness band">Fitness band</option>
<option value="Heart rate monitor">Heart rate monitor</option>
<option value="LE tracker">LE tracker</option>
<option value="Phone">Phone</option>
<option value="Smart ring">Smart ring</option>
<option value="Health device">Health device</option>
<option value="Smart bulb">Smart bulb</option>
</select>
</div>

<div class="mb-3">
<label class="form-label" for="model_number-select">Model Number</label>
<select name="model_number" class="form-select optimized-select" id="model_number-select">
<option value="default" selected>-- All --</option>
<option value="other">Other</option>
{% for model_number in model_numbers %}
<option value="{{ model_number }}">{{ model_number }}</option>
{% endfor %}
</select>
</div>

<div class="mb-3">
<label class="form-label">Procured Date</label>
<div class="input-group">
<input type="date" name="procured_date" class="form-control">
</div>
</div>

<div class="mb-3">
<label class="form-label">Model Year</label>
<div class="input-group">
<input type="number" name="model_year" class="form-control">
</div>
</div>
</div>

<div class="col-md-6">
<div class="mb-3">
<label class="form-label" for="manufacturer-select">Manufacturer</label>
<select name="manufacturer" class="form-select optimized-select" id="manufacturer-select">
<option value="default" selected>-- All --</option>
<option value="other">Other</option>
{% for manufacturer in manufacturers %}
<option value="{{ manufacturer }}">{{ manufacturer }}</option>
{% endfor %}
</select>
</div>

<div class="mb-3">
<label class="form-label" for="chipset_manufacturer-select">Chipset Manufacturer</label>
<select name="chipset_manufacturer" class="form-select optimized-select" id="chipset_manufacturer-select">
<option value="default" selected>-- All --</option>
<option value="other">Other</option>
{% for chipset_manufacturer in chipset_manufacturers %}
<option value="{{ chipset_manufacturer }}">{{ chipset_manufacturer }}</option>
{% endfor %}
</select>
</div>

<div class="mb-3">
<label class="form-label">Geo Locations</label>
<select name="geo_location" class="form-select">
<option value="default" selected>-- All --</option>
<option value="SD">SD</option>
<option value="SDC">SDC</option>
<option value="QIPL">QIPL</option>
</select>
</div>

{% comment %} <div class="mb-3">
<label class="form-label">Device Status</label>
<select name="device_status" class="form-select">
<option value="default" selected>-- All --</option>
<option value="Active">Active</option>
<option value="Missing">Missing</option>
<option value="Retired">Retired</option>
<option value="Damaged">Damaged</option>
</select>
</div> {% endcomment %}
</div>

<div class="col-12 text-end">
<button type="submit" class="btn btn-primary">Create</button>
</div>
</form>

<style>
.optimized-select-wrapper {
position: relative;
width: 100%;
}

.optimized-select-button {
width: 100%;
text-align: left;
cursor: pointer;
}

.optimized-select-dropdown {
display: none;
position: absolute;
top: 100%;
left: 0;
right: 0;
background: white;
border: 1px solid #dee2e6;
border-radius: 0.375rem;
box-shadow: 0 2px 5px rgba(0,0,0,0.1);
z-index: 1000;
margin-top: 0.25rem;
}

.optimized-select-search {
width: 100%;
padding: 0.5rem;
border-bottom: 1px solid #dee2e6;
border-radius: 0.375rem 0.375rem 0 0;
}

.optimized-select-options {
overflow-y: auto;
position: relative;
border-radius: 0 0 0.375rem 0.375rem;
}

.virtual-scroll-container {
position: relative;
}

.optimized-select-option {
padding: 0.5rem 1rem;
cursor: pointer;
position: absolute;
width: 100%;
display: flex;
align-items: center;
}

.optimized-select-option:hover {
background-color: #f8f9fa;
}

.optimized-select-options::-webkit-scrollbar {
width: 6px;
}

.optimized-select-options::-webkit-scrollbar-track {
background: #f1f1f1;
border-radius: 3px;
}

.optimized-select-options::-webkit-scrollbar-thumb {
background: #888;
border-radius: 3px;
}

.optimized-select-options::-webkit-scrollbar-thumb:hover {
background: #555;
}
</style>

<script>
// Custom select with virtual scrolling and search that can be reused
class OptimizedSelect {
constructor(originalSelect, options = {}) {
this.originalSelect = originalSelect;
this.options = options;
this.itemHeight = 35;
this.visibleItems = 8;
this.allOptions = Array.from(originalSelect.options).map(opt => ({
value: opt.value,
label: opt.text
}));
this.isOpen = false;

this.init();
}

init() {
// Create wrapper
this.wrapper = document.createElement('div');
this.wrapper.className = 'optimized-select-wrapper';
this.wrapper.id = `${this.elementId}-wrapper`;

// Create custom select button
this.button = document.createElement('button');
this.button.className = 'optimized-select-button form-select';
this.button.id = `${this.elementId}-button`;
this.button.type = 'button'; // Prevent form submission
this.button.textContent = this.originalSelect.selectedOptions[0]?.text || 'Choose...';

// Create dropdown container
this.dropdown = document.createElement('div');
this.dropdown.className = 'optimized-select-dropdown';
this.dropdown.id = `${this.elementId}-dropdown`;

// Create search input
this.searchInput = document.createElement('input');
this.searchInput.className = 'optimized-select-search form-control';
this.searchInput.id = `${this.elementId}-search`;
this.searchInput.placeholder = 'Search...';

// Create options container
this.optionsContainer = document.createElement('div');
this.optionsContainer.className = 'optimized-select-options';
this.optionsContainer.id = `${this.elementId}-options`;
this.optionsContainer.style.height = `${this.itemHeight * this.visibleItems}px`;

// Create virtual scroll container
this.virtualScroll = document.createElement('div');
this.virtualScroll.className = 'virtual-scroll-container';
this.virtualScroll.id = `${this.elementId}-virtual-scroll`;

// Assemble the components
this.dropdown.appendChild(this.searchInput);
this.dropdown.appendChild(this.optionsContainer);
this.optionsContainer.appendChild(this.virtualScroll);
this.wrapper.appendChild(this.button);
this.wrapper.appendChild(this.dropdown);

// Insert custom select after original
this.originalSelect.style.display = 'none';
this.originalSelect.parentNode.insertBefore(this.wrapper, this.originalSelect.nextSibling);

this.addEventListeners();
this.filterAndRenderOptions();
}

addEventListeners() {
// Toggle dropdown with improved handling
this.button.addEventListener('mousedown', (e) => {
e.preventDefault(); // Prevent focus issues
this.toggleDropdown();
});

// Handle search
this.searchInput.addEventListener('input', () => {
this.filterAndRenderOptions();
});

// Prevent search input from closing dropdown
this.searchInput.addEventListener('mousedown', (e) => {
e.stopPropagation();
});

// Handle scroll
this.optionsContainer.addEventListener('scroll', () => {
this.renderVisibleOptions();
});

// Close dropdown when clicking outside
document.addEventListener('mousedown', (e) => {
if (!this.wrapper.contains(e.target)) {
this.closeDropdown();
}
});

// Prevent dropdown from closing when clicking inside
this.dropdown.addEventListener('mousedown', (e) => {
e.stopPropagation();
});
}

toggleDropdown() {
if (this.isOpen) {
this.closeDropdown();
} else {
this.openDropdown();
}
}

openDropdown() {
this.isOpen = true;
this.dropdown.style.display = 'block';
this.searchInput.focus();
this.filterAndRenderOptions();
}

closeDropdown() {
this.isOpen = false;
this.dropdown.style.display = 'none';
this.searchInput.value = '';
this.filterAndRenderOptions();
}

filterAndRenderOptions() {
const searchTerm = this.searchInput.value.toLowerCase();
this.filteredOptions = this.allOptions.filter(option => 
option.label.toLowerCase().includes(searchTerm)
);

// Reset scroll position
this.optionsContainer.scrollTop = 0;
this.virtualScroll.style.height = `${this.filteredOptions.length * this.itemHeight}px`;
this.renderVisibleOptions();
}

renderVisibleOptions() {
const scrollTop = this.optionsContainer.scrollTop;
const startIndex = Math.floor(scrollTop / this.itemHeight);
const endIndex = startIndex + this.visibleItems + 2;

this.virtualScroll.innerHTML = '';

this.filteredOptions.slice(startIndex, endIndex).forEach((option, index) => {
const optionEl = document.createElement('div');
optionEl.className = 'optimized-select-option';
optionEl.textContent = option.label;
optionEl.style.position = 'absolute';
optionEl.style.top = `${(startIndex + index) * this.itemHeight}px`;
optionEl.style.height = `${this.itemHeight}px`;

optionEl.addEventListener('mousedown', (e) => {
e.preventDefault(); // Prevent focus issues
this.selectOption(option);
});

this.virtualScroll.appendChild(optionEl);
});
}

selectOption(option) {
// Update original select
this.originalSelect.value = option.value;
this.originalSelect.dispatchEvent(new Event('change'));

// Update custom select
this.button.textContent = option.label;
this.closeDropdown();
}
}
</script>

<script>
// Initialize all optimized selects
document.addEventListener('DOMContentLoaded', function() {
// Initialize optimized selects for all elements with the 'optimized-select' class
document.querySelectorAll('.optimized-select').forEach(select => {
new OptimizedSelect(select);
});
});

</script>
{% endif %}
{% endblock %}
