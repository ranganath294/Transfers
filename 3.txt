{% extends 'iot_catalogue/base.html' %}
{% load static %}

{% block content_div %}
<form id="iot-search-form" method="post" action="{% url 'iot_catalogue:search' %}" class="row g-3">
{% csrf_token %}
<div class="col-md-6">
<div class="mb-3">
    <label class="form-label" for="device-type-select">Device Type</label>
    <select name="device_type" id="device-type-select" class="form-select">
        <option value="default" selected>-- All --</option>
        {% for type in device_types %}
        <option value="{{ type }}">{{ type }}</option>
        {% endfor %}
    </select>
</div>

<!-- Other form fields with meaningful IDs -->
<div class="mb-3">
    <label class="form-label" for="model-number-input">Model Number</label>
    <div class="input-group">
        <span class="input-group-text">LIKE</span>
        <input type="text" name="model_number" id="model-number-input" class="form-control">
    </div>
</div>
<!-- ... rest of the form fields ... -->
</div>
</form>

<div class="modal fade" id="user-assignment-modal" tabindex="-1" aria-labelledby="user-assignment-modal-label" aria-hidden="true">
    <!-- Modal content -->
</div>
{% endblock %}

{% block results_div %}
{% if devices %}
<style>
/* ... styles remain the same ... */
</style>

<div class="card-body">
    <div class="table-shadow">
        <div class="table-container">
            <table class="table table-hover table-sticky mb-0" id="iot-devices-table">
                <thead>
                    <tr class="bg-light">
                        {% for col_name in column_names %}
                        <th class="fw-semibold" id="col-header-{{ col_name|lower|replace:" ":"_" }}">{{ col_name }}</th>
                        {% endfor %}
                    </tr>
                </thead>
                <tbody id="iot-devices-tbody">
                    <!-- Rows will be inserted here by JavaScript -->
                </tbody>
            </table>
        </div>
    </div>
</div>

<script id="devices-data" type="application/json">
{{ devices|safe }}
</script>

<script>
class OptimizedSelect {
    constructor(originalSelect) {
        this.originalSelect = originalSelect;
        this.selectId = originalSelect.id;
        this.itemHeight = 35;
        this.visibleItems = 8;
        this.allOptions = Array.from(originalSelect.options).map(opt => ({
            value: opt.value,
            label: opt.text
        }));
        this.init();
    }

    init() {
        // Create wrapper with meaningful ID
        this.wrapper = document.createElement('div');
        this.wrapper.id = `${this.selectId}-wrapper`;
        this.wrapper.className = 'optimized-select-wrapper';

        // Create button with meaningful ID
        this.button = document.createElement('button');
        this.button.id = `${this.selectId}-button`;
        this.button.className = 'optimized-select-button form-select';
        this.button.type = 'button';
        this.button.textContent = this.originalSelect.selectedOptions[0]?.text || 'Choose...';

        // Create dropdown with meaningful ID
        this.dropdown = document.createElement('div');
        this.dropdown.id = `${this.selectId}-dropdown`;
        this.dropdown.className = 'optimized-select-dropdown';

        // ... rest of initialization ...
    }
    // ... rest of the class methods ...
}

class DeviceTableManager {
    constructor() {
        this.tableBody = document.getElementById('iot-devices-tbody');
        this.devices = JSON.parse(document.getElementById('devices-data').textContent);
        this.currentEditingDeviceId = null;
    }

    createTableRow(device, rowIndex) {
        const row = document.createElement('tr');
        row.id = `device-row-${device.id}`;
        
        Object.entries(device).forEach(([key, value]) => {
            const cell = document.createElement('td');
            // Create meaningful cell ID combining device ID, row index, and column name
            cell.id = `device-${device.id}-${key}`;
            
            if (key === "current_user__username") {
                this.createUserCell(cell, device, rowIndex);
            } else {
                cell.textContent = value;
                // Add data attributes for easier querying
                cell.dataset.deviceId = device.id;
                cell.dataset.column = key;
            }
            row.appendChild(cell);
        });
        
        return row;
    }

    createUserCell(cell, device, rowIndex) {
        const container = document.createElement('div');
        container.id = `user-container-${device.id}`;
        container.className = 'current-user-cell';

        const userText = document.createElement('span');
        userText.id = `user-text-${device.id}`;
        userText.className = 'current-user-text';
        userText.textContent = device.current_user__username || '';

        const editIcon = document.createElement('i');
        editIcon.id = `edit-user-${device.id}`;
        editIcon.className = 'fas fa-edit current-user-edit-icon';
        editIcon.setAttribute('title', 'Edit User Assignment');
        editIcon.dataset.deviceId = device.id;
        editIcon.dataset.rowIndex = rowIndex;

        container.appendChild(userText);
        container.appendChild(editIcon);
        cell.appendChild(container);
    }

    handleUserUpdate(deviceId, newUsername) {
        const userText = document.getElementById(`user-text-${deviceId}`);
        const availabilityCell = document.querySelector(`#device-${deviceId}-availability`);
        const assignedDateCell = document.querySelector(`#device-${deviceId}-assigned_date`);
        
        if (userText && availabilityCell && assignedDateCell) {
            userText.textContent = newUsername;
            availabilityCell.textContent = newUsername ? "In Use" : "Available";
            assignedDateCell.textContent = newUsername ? new Date().toISOString().split('T')[0] : "";
        }
    }

    init() {
        this.devices.forEach((device, index) => {
            const row = this.createTableRow(device, index);
            this.tableBody.appendChild(row);
        });

        this.initializeEventListeners();
    }

    initializeEventListeners() {
        // Event delegation for edit icons
        this.tableBody.addEventListener('click', (e) => {
            const editIcon = e.target.closest('.current-user-edit-icon');
            if (editIcon) {
                const deviceId = editIcon.dataset.deviceId;
                this.currentEditingDeviceId = deviceId;
                this.openUserAssignmentModal(deviceId);
            }
        });

        // Modal save button listener
        const saveButton = document.getElementById('user-assignment-save-btn');
        if (saveButton) {
            saveButton.addEventListener('click', () => this.handleUserAssignmentSave());
        }
    }

    openUserAssignmentModal(deviceId) {
        const userSelect = document.getElementById('user-select');
        const currentUser = document.getElementById(`user-text-${deviceId}`).textContent;
        
        if (userSelect) {
            userSelect.value = currentUser;
            const modal = new bootstrap.Modal(document.getElementById('user-assignment-modal'));
            modal.show();
        }
    }

    async handleUserAssignmentSave() {
        if (!this.currentEditingDeviceId) return;

        const userSelect = document.getElementById('user-select');
        const selectedUser = userSelect.value;
        
        try {
            const response = await this.updateUserAssignment(this.currentEditingDeviceId, selectedUser);
            if (response.ok) {
                this.handleUserUpdate(this.currentEditingDeviceId, selectedUser);
                bootstrap.Modal.getInstance(document.getElementById('user-assignment-modal')).hide();
            }
        } catch (error) {
            console.error('Error updating user assignment:', error);
        }
    }

    async updateUserAssignment(deviceId, username) {
        return fetch("{% url 'iot_catalogue:assign_user' %}", {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': this.getCsrfToken()
            },
            body: JSON.stringify({ 
                user: username, 
                id: deviceId 
            })
        });
    }

    getCsrfToken() {
        return document.querySelector('[name=csrfmiddlewaretoken]').value;
    }
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    const tableManager = new DeviceTableManager();
    tableManager.init();

    // Initialize optimized select for user assignment
    const userSelect = document.getElementById('user-select');
    if (userSelect) {
        new OptimizedSelect(userSelect);
    }
});
</script>
{% endif %}
{% endblock %}