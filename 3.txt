{% extends 'iot_catalogue/base.html' %}

{% block content_div %}
{% if is_admin %}

<div class="alert alert-info" role="alert">
  <i class="bi bi-info-circle"></i> * To create new entries, please select "Other" from the respective dropdown and enter the new name in the field that appears.
</div>

<form method="post" action="{% url 'iot_catalogue:data_entry' %}" class="row g-3" id="iotForm">
{% csrf_token %}
<div class="col-md-6">
<div class="mb-3">
<label class="form-label">Device Type</label>
<select name="device_type" class="form-select optimized-select">
<option value="default" selected>-- All --</option>
<option value="Headset">Headset</option>
<option value="Speaker">Speaker</option>
<option value="Earbud">Earbud</option>
<option value="Earbud - LEA">Earbud - LEA</option>
<option value="HID Mouse">HID Mouse</option>
<option value="HID Keyboard">HID Keyboard</option>
<option value="HID Gamepad">HID Gamepad</option>
<option value="HOGP Mouse">HOGP Mouse</option>
<option value="HOGP Keyboard">HOGP Keyboard</option>
<option value="HOGP Gamepad">HOGP Gamepad</option>
<option value="Carkit">Carkit</option>
<option value="Smart Watch">Smart Watch</option>
<option value="Fitness band">Fitness band</option>
<option value="Heart rate monitor">Heart rate monitor</option>
<option value="LE tracker">LE tracker</option>
<option value="Phone">Phone</option>
<option value="Smart ring">Smart ring</option>
<option value="Health device">Health device</option>
<option value="Smart bulb">Smart bulb</option>
</select>
</div>

<div class="mb-3">
<label class="form-label" for="model_number-select">Model Number</label>
<select name="model_number" class="form-select optimized-select" id="model_number-select">
<option value="default" selected>-- All --</option>
<option value="other">Other</option>
{% for model_number in model_numbers %}
<option value="{{ model_number }}">{{ model_number }}</option>
{% endfor %}
</select>
<div class="input-group mt-2">
    <input type="text" name="new_model_number" class="form-control" placeholder="Enter new model number" disabled>
    <span class="input-group-text text-danger d-none">*</span>
</div>
</div>

<div class="mb-3">
<label class="form-label">Procured Date</label>
<div class="input-group">
<input type="date" name="procured_date" class="form-control">
</div>
</div>

<div class="mb-3">
<label class="form-label">Model Year</label>
<div class="input-group">
<input type="number" name="model_year" class="form-control">
</div>
</div>
</div>

<div class="col-md-6">
<div class="mb-3">
<label class="form-label" for="manufacturer-select">Manufacturer</label>
<select name="manufacturer" class="form-select optimized-select" id="manufacturer-select">
<option value="default" selected>-- All --</option>
<option value="other">Other</option>
{% for manufacturer in manufacturers %}
<option value="{{ manufacturer }}">{{ manufacturer }}</option>
{% endfor %}
</select>
<div class="input-group mt-2">
    <input type="text" name="new_manufacturer" class="form-control" placeholder="Enter new manufacturer" disabled>
    <span class="input-group-text text-danger d-none">*</span>
</div>
</div>

<div class="mb-3">
<label class="form-label" for="chipset_manufacturer-select">Chipset Manufacturer</label>
<select name="chipset_manufacturer" class="form-select optimized-select" id="chipset_manufacturer-select">
<option value="default" selected>-- All --</option>
<option value="other">Other</option>
{% for chipset_manufacturer in chipset_manufacturers %}
<option value="{{ chipset_manufacturer }}">{{ chipset_manufacturer }}</option>
{% endfor %}
</select>
<div class="input-group mt-2">
    <input type="text" name="new_chipset_manufacturer" class="form-control" placeholder="Enter new chipset manufacturer" disabled>
    <span class="input-group-text text-danger d-none">*</span>
</div>
</div>

<div class="mb-3">
<label class="form-label">Geo Locations</label>
<select name="geo_location" class="form-select">
<option value="default" selected>-- All --</option>
<option value="SD">SD</option>
<option value="SDC">SDC</option>
<option value="QIPL">QIPL</option>
</select>
</div>
</div>

<div class="col-12 text-end">
<button type="submit" class="btn btn-primary">Create</button>
</div>
</form>

<style>
.optimized-select-wrapper {
    position: relative;
    width: 100%;
}

.optimized-select-button {
    width: 100%;
    text-align: left;
    cursor: pointer;
}

.optimized-select-dropdown {
    display: none;
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: white;
    border: 1px solid #dee2e6;
    border-radius: 0.375rem;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    z-index: 1000;
    margin-top: 0.25rem;
}

.optimized-select-search {
    width: 100%;
    padding: 0.5rem;
    border-bottom: 1px solid #dee2e6;
    border-radius: 0.375rem 0.375rem 0 0;
}

.optimized-select-options {
    overflow-y: auto;
    position: relative;
    border-radius: 0 0 0.375rem 0.375rem;
}

.virtual-scroll-container {
    position: relative;
}

.optimized-select-option {
    padding: 0.5rem 1rem;
    cursor: pointer;
    position: absolute;
    width: 100%;
    display: flex;
    align-items: center;
}

.optimized-select-option:hover {
    background-color: #f8f9fa;
}

.optimized-select-options::-webkit-scrollbar {
    width: 6px;
}

.optimized-select-options::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 3px;
}

.optimized-select-options::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 3px;
}

.optimized-select-options::-webkit-scrollbar-thumb:hover {
    background: #555;
}
</style>

<script>
// Custom select with virtual scrolling and search that can be reused
class OptimizedSelect {
    constructor(originalSelect, options = {}) {
        this.originalSelect = originalSelect;
        this.options = options;
        this.itemHeight = 35;
        this.visibleItems = 8;
        this.allOptions = Array.from(originalSelect.options).map(opt => ({
            value: opt.value,
            label: opt.text
        }));
        this.isOpen = false;

        this.init();
    }

    init() {
        // Create wrapper
        this.wrapper = document.createElement('div');
        this.wrapper.className = 'optimized-select-wrapper';

        // Create custom select button
        this.button = document.createElement('button');
        this.button.className = 'optimized-select-button form-select';
        this.button.type = 'button';
        this.button.textContent = this.originalSelect.selectedOptions[0]?.text || 'Choose...';

        // Create dropdown container
        this.dropdown = document.createElement('div');
        this.dropdown.className = 'optimized-select-dropdown';

        // Create search input
        this.searchInput = document.createElement('input');
        this.searchInput.className = 'optimized-select-search form-control';
        this.searchInput.placeholder = 'Search...';

        // Create options container
        this.optionsContainer = document.createElement('div');
        this.optionsContainer.className = 'optimized-select-options';
        this.optionsContainer.style.height = `${this.itemHeight * this.visibleItems}px`;

        // Create virtual scroll container
        this.virtualScroll = document.createElement('div');
        this.virtualScroll.className = 'virtual-scroll-container';

        // Assemble the components
        this.dropdown.appendChild(this.searchInput);
        this.dropdown.appendChild(this.optionsContainer);
        this.optionsContainer.appendChild(this.virtualScroll);
        this.wrapper.appendChild(this.button);
        this.wrapper.appendChild(this.dropdown);

        // Insert custom select after original
        this.originalSelect.style.display = 'none';
        this.originalSelect.parentNode.insertBefore(this.wrapper, this.originalSelect.nextSibling);

        this.addEventListeners();
        this.filterAndRenderOptions();
    }

    addEventListeners() {
        this.button.addEventListener('mousedown', (e) => {
            e.preventDefault();
            this.toggleDropdown();
        });

        this.searchInput.addEventListener('input', () => {
            this.filterAndRenderOptions();
        });

        this.searchInput.addEventListener('mousedown', (e) => {
            e.stopPropagation();
        });

        this.optionsContainer.addEventListener('scroll', () => {
            this.renderVisibleOptions();
        });

        document.addEventListener('mousedown', (e) => {
            if (!this.wrapper.contains(e.target)) {
                this.closeDropdown();
            }
        });

        this.dropdown.addEventListener('mousedown', (e) => {
            e.stopPropagation();
        });
    }

    toggleDropdown() {
        if (this.isOpen) {
            this.closeDropdown();
        } else {
            this.openDropdown();
        }
    }

    openDropdown() {
        this.isOpen = true;
        this.dropdown.style.display = 'block';
        this.searchInput.focus();
        this.filterAndRenderOptions();
    }

    closeDropdown() {
        this.isOpen = false;
        this.dropdown.style.display = 'none';
        this.searchInput.value = '';
        this.filterAndRenderOptions();
    }

    filterAndRenderOptions() {
        const searchTerm = this.searchInput.value.toLowerCase();
        this.filteredOptions = this.allOptions.filter(option => 
            option.label.toLowerCase().includes(searchTerm)
        );

        this.optionsContainer.scrollTop = 0;
        this.virtualScroll.style.height = `${this.filteredOptions.length * this.itemHeight}px`;
        this.renderVisibleOptions();
    }

    renderVisibleOptions() {
        const scrollTop = this.optionsContainer.scrollTop;
        const startIndex = Math.floor(scrollTop / this.itemHeight);
        const endIndex = startIndex + this.visibleItems + 2;

        this.virtualScroll.innerHTML = '';

        this.filteredOptions.slice(startIndex, endIndex).forEach((option, index) => {
            const optionEl = document.createElement('div');
            optionEl.className = 'optimized-select-option';
            optionEl.textContent = option.label;
            optionEl.style.top = `${(startIndex + index) * this.itemHeight}px`;
            optionEl.style.height = `${this.itemHeight}px`;

            optionEl.addEventListener('mousedown', (e) => {
                e.preventDefault();
                this.selectOption(option);
            });

            this.virtualScroll.appendChild(optionEl);
        });
    }

    selectOption(option) {
        this.originalSelect.value = option.value;
        this.originalSelect.dispatchEvent(new Event('change'));
        this.button.textContent = option.label;
        this.closeDropdown();
    }
}

// Initialize optimized selects and handle form validation
document.addEventListener('DOMContentLoaded', function() {
    // Initialize optimized selects
    document.querySelectorAll('.optimized-select').forEach(select => {
        new OptimizedSelect(select);
    });

    // Handle "Other" option and validation
    const handleOtherOption = (selectElement) => {
        const inputName = `new_${selectElement.name}`;
        const inputWrapper = document.querySelector(`input[name="${inputName}"]`).parentElement;
        const newEntryInput = inputWrapper.querySelector('input');
        const requiredMarker = inputWrapper.querySelector('.input-group-text');
        
        const updateInputState = (isOther) => {
            newEntryInput.disabled = !isOther;
            if (isOther) {
                newEntryInput.setAttribute('required', '');
                requiredMarker.classList.remove('d-none');
            } else {
                newEntryInput.removeAttribute('required');
                requiredMarker.classList.add('d-none');
                newEntryInput.value = '';
            }
        };

        selectElement.addEventListener('change', function() {
            updateInputState(this.value === 'other');
        });
    };

    // Apply the handler to each select that needs it
    ['manufacturer', 'model_number', 'chipset_manufacturer'].forEach(selectName => {
        const select = document.querySelector(`select[name="${selectName}"]`);
        if (select) {
            handleOtherOption(select);
        }
    });
});
</script>
{% endif %}
{% endblock %}