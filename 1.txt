// Custom select with virtual scrolling and search
class OptimizedSelect {
    constructor(originalSelect, options = {}) {
        this.originalSelect = originalSelect;
        this.options = options;
        this.itemHeight = 35;
        this.visibleItems = 8;
        this.allOptions = Array.from(originalSelect.options).map(opt => ({
            value: opt.value,
            label: opt.text
        }));
        
        this.init();
    }

    init() {
        // Create wrapper
        this.wrapper = document.createElement('div');
        this.wrapper.className = 'optimized-select-wrapper';
        
        // Create custom select button
        this.button = document.createElement('button');
        this.button.className = 'optimized-select-button form-select';
        this.button.textContent = this.originalSelect.selectedOptions[0]?.text || 'Choose...';
        
        // Create dropdown container
        this.dropdown = document.createElement('div');
        this.dropdown.className = 'optimized-select-dropdown';
        
        // Create search input
        this.searchInput = document.createElement('input');
        this.searchInput.className = 'optimized-select-search form-control';
        this.searchInput.placeholder = 'Search users...';
        
        // Create options container
        this.optionsContainer = document.createElement('div');
        this.optionsContainer.className = 'optimized-select-options';
        this.optionsContainer.style.height = `${this.itemHeight * this.visibleItems}px`;
        
        // Create virtual scroll container
        this.virtualScroll = document.createElement('div');
        this.virtualScroll.className = 'virtual-scroll-container';
        
        // Assemble the components
        this.dropdown.appendChild(this.searchInput);
        this.dropdown.appendChild(this.optionsContainer);
        this.optionsContainer.appendChild(this.virtualScroll);
        this.wrapper.appendChild(this.button);
        this.wrapper.appendChild(this.dropdown);
        
        // Insert custom select after original
        this.originalSelect.style.display = 'none';
        this.originalSelect.parentNode.insertBefore(this.wrapper, this.originalSelect.nextSibling);
        
        this.addEventListeners();
        this.filterAndRenderOptions();
    }

    addEventListeners() {
        // Toggle dropdown
        this.button.addEventListener('click', () => {
            this.dropdown.style.display = this.dropdown.style.display === 'none' ? 'block' : 'none';
            if (this.dropdown.style.display === 'block') {
                this.searchInput.focus();
            }
        });

        // Handle search
        this.searchInput.addEventListener('input', () => {
            this.filterAndRenderOptions();
        });

        // Handle scroll
        this.optionsContainer.addEventListener('scroll', () => {
            this.renderVisibleOptions();
        });

        // Close dropdown when clicking outside
        document.addEventListener('click', (e) => {
            if (!this.wrapper.contains(e.target)) {
                this.dropdown.style.display = 'none';
            }
        });
    }

    filterAndRenderOptions() {
        const searchTerm = this.searchInput.value.toLowerCase();
        this.filteredOptions = this.allOptions.filter(option => 
            option.label.toLowerCase().includes(searchTerm)
        );
        
        // Reset scroll position
        this.optionsContainer.scrollTop = 0;
        this.virtualScroll.style.height = `${this.filteredOptions.length * this.itemHeight}px`;
        this.renderVisibleOptions();
    }

    renderVisibleOptions() {
        const scrollTop = this.optionsContainer.scrollTop;
        const startIndex = Math.floor(scrollTop / this.itemHeight);
        const endIndex = startIndex + this.visibleItems + 2; // +2 for smooth scrolling
        
        // Clear previous options
        this.virtualScroll.innerHTML = '';
        
        // Render only visible options
        this.filteredOptions.slice(startIndex, endIndex).forEach((option, index) => {
            const optionEl = document.createElement('div');
            optionEl.className = 'optimized-select-option';
            optionEl.textContent = option.label;
            optionEl.style.position = 'absolute';
            optionEl.style.top = `${(startIndex + index) * this.itemHeight}px`;
            optionEl.style.height = `${this.itemHeight}px`;
            
            optionEl.addEventListener('click', () => {
                this.selectOption(option);
            });
            
            this.virtualScroll.appendChild(optionEl);
        });
    }

    selectOption(option) {
        // Update original select
        this.originalSelect.value = option.value;
        this.originalSelect.dispatchEvent(new Event('change'));
        
        // Update custom select
        this.button.textContent = option.label;
        this.dropdown.style.display = 'none';
    }
}

// Styles for the custom select
const styles = `
.optimized-select-wrapper {
    position: relative;
    width: 100%;
}

.optimized-select-button {
    width: 100%;
    text-align: left;
    cursor: pointer;
}

.optimized-select-dropdown {
    display: none;
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: white;
    border: 1px solid #dee2e6;
    border-radius: 0.375rem;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    z-index: 1000;
    margin-top: 0.25rem;
}

.optimized-select-search {
    width: 100%;
    padding: 0.5rem;
    border-bottom: 1px solid #dee2e6;
    border-radius: 0.375rem 0.375rem 0 0;
}

.optimized-select-options {
    overflow-y: auto;
    position: relative;
    border-radius: 0 0 0.375rem 0.375rem;
}

.virtual-scroll-container {
    position: relative;
}

.optimized-select-option {
    padding: 0.5rem 1rem;
    cursor: pointer;
    position: absolute;
    width: 100%;
    display: flex;
    align-items: center;
}

.optimized-select-option:hover {
    background-color: #f8f9fa;
}

.optimized-select-options::-webkit-scrollbar {
    width: 6px;
}

.optimized-select-options::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 3px;
}

.optimized-select-options::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 3px;
}

.optimized-select-options::-webkit-scrollbar-thumb:hover {
    background: #555;
}
`;