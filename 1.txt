<!-- Move this to just before </body> in base.html -->
<div class="modal fade" id="userAssignmentModal" tabindex="-1" aria-labelledby="userAssignmentModalLabel" aria-hidden="true" style="z-index: 1050;">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="userAssignmentModalLabel">Assign User</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="userAssignmentForm">
          <input type="hidden" id="deviceId" name="deviceId">
          <div class="mb-3">
            <label for="userSelect" class="form-label">Select User</label>
            <select class="form-select" id="userSelect" name="username" required>
              <option value="">Choose...</option>
              {% for username in usernames %}
                <option value="{{ username }}">{{ username }}</option>
              {% endfor %}
            </select>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="saveUserAssignment">Save changes</button>
      </div>
    </div>
  </div>
</div>

<style>
.modal-backdrop {
    z-index: 1040;
}

.modal {
    z-index: 1050;
}

/* Ensure modal content is always clickable */
.modal-content {
    position: relative;
    z-index: 1051;
}

/* Additional styling for the backdrop */
.modal-backdrop.show {
    opacity: 0.5;
}

/* Ensure modal dialog is centered */
.modal-dialog-centered {
    display: flex;
    align-items: center;
    min-height: calc(100% - 1rem);
}

/* Improve modal appearance */
.modal-content {
    border: none;
    border-radius: 0.5rem;
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
}

/* Ensure form elements are clickable */
.modal form,
.modal input,
.modal select,
.modal button {
    position: relative;
    z-index: 1052;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Ensure modal is properly initialized
    const modalElement = document.getElementById('userAssignmentModal');
    const modal = new bootstrap.Modal(modalElement, {
        backdrop: 'static',  // Prevents closing when clicking outside
        keyboard: true       // Allows closing with Esc key
    });

    // Add event listener to close modal with escape key
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape' && modalElement.classList.contains('show')) {
            modal.hide();
        }
    });

    // Rest of your modal initialization code...
    // (Keep the existing JavaScript for handling edit icons and form submission)
});
</script>










document.addEventListener('DOMContentLoaded', function() {
    const devicesData = JSON.parse(document.getElementById('devices-data').textContent);
    const tableBody = document.getElementById('results-table-body');
    
    devicesData.forEach(device => {
        const row = document.createElement('tr');
        for (const key in device) {
            const cell = document.createElement('td');

            if (key === "current_user__username") {
                const container = document.createElement('div');
                container.className = 'current-user-cell';

                const userText = document.createElement('span');
                userText.className = 'current-user-text';
                userText.textContent = device[key] || '';
                container.appendChild(userText);

                const editIcon = document.createElement('i');
                editIcon.className = 'fas fa-edit current-user-edit-icon';
                editIcon.setAttribute('title', 'Edit User Assignment');

                editIcon.addEventListener('click', function(e) {
                    e.stopPropagation();
                    const modal = new bootstrap.Modal(document.getElementById('userAssignmentModal'));
                    document.getElementById('deviceId').value = device.id;
                    
                    const userSelect = document.getElementById('userSelect');
                    if (device[key]) {
                        userSelect.value = device[key];
                    } else {
                        userSelect.selectedIndex = 0;
                    }
                    
                    modal.show();
                });

                container.appendChild(editIcon);
                cell.appendChild(container);
            } else {
                cell.textContent = device[key];
            }

            row.appendChild(cell);
        }
        tableBody.appendChild(row);
    });
});