<!-- base.html -->
<!DOCTYPE html>
<html>
<head>
    <!-- Your existing head content -->
</head>
<body>
    <!-- Your existing base template content -->
    {% block content_div %}{% endblock %}
    {% block results_div %}{% endblock %}

    <!-- Add this modal at the bottom of base.html, just before closing body tag -->
    <div class="modal fade" id="userAssignmentModal" tabindex="-1" aria-labelledby="userAssignmentModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="userAssignmentModalLabel">Assign User</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="userAssignmentForm">
                        <input type="hidden" id="deviceId" name="deviceId">
                        <div class="mb-3">
                            <label for="userSelect" class="form-label">Select User</label>
                            <select class="form-select" id="userSelect" name="username" required>
                                <option value="">Choose...</option>
                                {% for username in usernames %}
                                    <option value="{{ username }}">{{ username }}</option>
                                {% endfor %}
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveUserAssignment">Save changes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add these styles to base.html -->
    <style>
        .modal-backdrop {
            z-index: 1040;
        }

        .modal {
            z-index: 1050;
        }

        .modal-content {
            position: relative;
            z-index: 1051;
            border: none;
            border-radius: 0.5rem;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        }

        .modal form,
        .modal input,
        .modal select,
        .modal button {
            position: relative;
            z-index: 1052;
        }

        .modal-backdrop.show {
            opacity: 0.5;
        }

        .modal-dialog-centered {
            display: flex;
            align-items: center;
            min-height: calc(100% - 1rem);
        }

        .current-user-cell {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .current-user-text {
            flex-grow: 1;
        }

        .current-user-edit-icon {
            color: #6c757d;
            cursor: pointer;
            transition: color 0.2s ease;
        }

        .current-user-edit-icon:hover {
            color: #0d6efd;
        }
    </style>
</body>
</html>

<!-- search.html (your existing template) -->
{% extends 'iot_catalogue/base.html' %}

{% block content_div %}
    <!-- Your existing search form code remains unchanged -->
{% endblock %}

{% block results_div %}
{% if devices %}
<style>
    .table-container {
        position: relative;
        max-height: calc(100vh - 300px);
        overflow: auto;
    }

    .table-sticky thead {
        position: sticky;
        top: 0;
        z-index: 1;
        background-color: #f8f9fa;
    }

    .table-container::-webkit-scrollbar {
        width: 8px;
        height: 8px;
    }

    .table-container::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 4px;
    }

    .table-container::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 4px;
    }

    .table-container::-webkit-scrollbar-thumb:hover {
        background: #555;
    }

    .table-sticky th,
    .table-sticky td {
        white-space: nowrap;
        padding: 0.75rem;
    }

    .table-shadow {
        box-shadow: inset 0 0 5px rgba(0,0,0,0.15);
        border-radius: 0.375rem;
    }
</style>

<div class="card-body">
    <div class="table-shadow">
        <div class="table-container">
            <table class="table table-hover table-sticky mb-0">
                <thead>
                    <tr class="bg-light">
                        {% for col_name in column_names %}
                            <th class="fw-semibold">{{ col_name }}</th>
                        {% endfor %}
                    </tr>
                </thead>
                <tbody id="results-table-body">
                    <!-- Rows will be inserted here by JavaScript -->
                </tbody>
            </table>
        </div>
    </div>
</div>

<script id="devices-data" type="application/json">
    {{ devices|safe }}
</script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const devicesData = JSON.parse(document.getElementById('devices-data').textContent);
    const tableBody = document.getElementById('results-table-body');
    
    devicesData.forEach(device => {
        const row = document.createElement('tr');
        for (const key in device) {
            const cell = document.createElement('td');

            if (key === "current_user__username") {
                const container = document.createElement('div');
                container.className = 'current-user-cell';

                const userText = document.createElement('span');
                userText.className = 'current-user-text';
                userText.textContent = device[key] || '';
                container.appendChild(userText);

                const editIcon = document.createElement('i');
                editIcon.className = 'fas fa-edit current-user-edit-icon';
                editIcon.setAttribute('title', 'Edit User Assignment');

                editIcon.addEventListener('click', function(e) {
                    e.stopPropagation();
                    document.getElementById('deviceId').value = device.id;
                    
                    const userSelect = document.getElementById('userSelect');
                    if (device[key]) {
                        userSelect.value = device[key];
                    } else {
                        userSelect.selectedIndex = 0;
                    }
                    
                    const modal = new bootstrap.Modal(document.getElementById('userAssignmentModal'));
                    modal.show();
                });

                container.appendChild(editIcon);
                cell.appendChild(container);
            } else {
                cell.textContent = device[key];
            }

            row.appendChild(cell);
        }
        tableBody.appendChild(row);
    });

    // Handle form submission
    document.getElementById('saveUserAssignment').addEventListener('click', function() {
        const form = document.getElementById('userAssignmentForm');
        const formData = new FormData(form);
        
        fetch('{% url "iot_catalogue:update_user_assignment" %}', {
            method: 'POST',
            headers: {
                'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                device_id: formData.get('deviceId'),
                username: formData.get('username'),
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Update the UI
                const deviceRow = document.querySelector(`tr[data-device-id="${formData.get('deviceId')}"]`);
                if (deviceRow) {
                    const userCell = deviceRow.querySelector('.current-user-text');
                    userCell.textContent = formData.get('username');
                }
                const modal = bootstrap.Modal.getInstance(document.getElementById('userAssignmentModal'));
                modal.hide();
            } else {
                alert('Error updating user assignment');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Error updating user assignment');
        });
    });
});
</script>
{% endif %}
{% endblock %}